package classes{	import flash.display.MovieClip;	import flash.display.Loader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.HTTPStatusEvent;	import flash.events.IEventDispatcher;	import flash.net.URLRequest;	import flash.net.URLLoader;	public class Preloader extends MovieClip	{		public function Preloader()		{			init();		}		public function init(  ):void		{			var game_loader:Loader = new Loader( );			enableListeners( game_loader.contentLoaderInfo );						game_loader.load( new URLRequest( "AGame.swf" ) );		}		private function enableListeners( dispatcher:IEventDispatcher ):void		{			dispatcher.addEventListener( Event.COMPLETE, fileLoaded );			dispatcher.addEventListener( ProgressEvent.PROGRESS, progressHandler );			dispatcher.addEventListener( HTTPStatusEvent.HTTP_STATUS, httpStatusHandler );			dispatcher.addEventListener( Event.INIT, initHandler );			dispatcher.addEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler );			dispatcher.addEventListener( Event.OPEN, openHandler );			dispatcher.addEventListener( Event.UNLOAD, unLoadHandler );		}		private function disableListeners( dispatcher:IEventDispatcher ):void		{			dispatcher.removeEventListener( Event.COMPLETE, fileLoaded );			dispatcher.removeEventListener( ProgressEvent.PROGRESS, progressHandler );			/*dispatcher.removeEventListener( HTTPStatusEvent.HTTP_STATUS, httpStatusHandler );			  dispatcher.removeEventListener( Event.INIT, initHandler );			  dispatcher.removeEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler );			  dispatcher.removeEventListener( Event.OPEN, openHandler );			  dispatcher.removeEventListener( Event.UNLOAD, unLoadHandler );*/		}		private function httpStatusHandler( ev:HTTPStatusEvent ):void { trace( "httpStatusHandler: " + ev ); }				        private function initHandler( ev:Event ):void { trace( "initHandler: " + ev );  }				        private function ioErrorHandler( ev:IOErrorEvent ):void {   trace( "ioErrorHandler: " + ev ); }				        private function openHandler( ev:Event ):void { trace( "openHandler: " + ev );  }				        private function unLoadHandler( ev:Event ):void { trace( "unLoadHandler: " + ev );  }		private function progressHandler( ev:ProgressEvent ):void		{			var comp:Number = ev.bytesLoaded / ev.bytesTotal;			var perc:int = Math.round( comp * 100 );						updatePreloaderSpin();			updatePreloaderBar( comp );			updatePreloaderText( perc );			updatePreloaderMC( perc );		}				private function updatePreloaderSpin():void		{			preloader_spin.rotation += 5;		}					private function updatePreloaderBar( comp:Number ):void		{			preloader_bar.scaleX = comp;		}		private function updatePreloaderText( perc:int ):void		{			preloader_text.text = perc + "%";		}				private function updatePreloaderMC( perc:int ):void		{			preloader_mc.gotoAndStop( perc );		}						private function removePreloaders():void		{			removeChild( preloader_spin );			removeChild( preloader_text );			removeChild( preloader_bar );			removeChild( bar_holder );			removeChild( preloader_mc );		}		private function fileLoaded( ev:Event ):void		{			disableListeners( ev.currentTarget as IEventDispatcher );						removePreloaders()			var game_mc:Loader = ev.currentTarget.loader as Loader;			addChild( game_mc );			//MovieClip(game_mc.content).init(  );		}	}}