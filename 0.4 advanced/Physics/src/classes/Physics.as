/*	http://www.emanueleferonato.com/2010/02/01/box2d-tutorial-for-the-absolute-beginners-revamped/*/package classes{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import Box2D.Dynamics.*;	import Box2D.Collision.*;	import Box2D.Collision.Shapes.*;	import Box2D.Common.Math.*;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class Physics extends Sprite	{		public var world:b2World = new b2World( new b2Vec2( 0, 15.0 ), true );		public var world_scale:int = 30;		public var time_count:Timer = new Timer(500);				public function Physics():void		{			debug_draw();						draw_box( 250, 350, 500, 100, false );			//draw_box( 250, 100, 100, 100, true );			//draw_circle( 100, 100, 50, false );			//draw_circle( 400, 100, 50, true );						addEventListener( Event.ENTER_FRAME, update );						time_count.addEventListener(TimerEvent.TIMER, on_time);			time_count.start();		}								public function debug_draw():void		{			var debug_draw:b2DebugDraw = new b2DebugDraw;			var debug_sprite:Sprite = new Sprite;			addChild( debug_sprite );						debug_draw.SetSprite( debug_sprite );			debug_draw.SetDrawScale( world_scale );			debug_draw.SetFlags( b2DebugDraw.e_shapeBit );						debug_draw.SetFillAlpha( .5 );			debug_draw.SetLineThickness( 1 );									world.SetDebugDraw( debug_draw );		}								public function draw_circle( px, py, r, d, mc:MovieClip = null ):void		{			var my_body:b2BodyDef = new b2BodyDef;						my_body.position.Set( px / world_scale, py / world_scale );						if ( d )			{				my_body.type = b2Body.b2_dynamicBody;			}						var my_circle:b2CircleShape = new b2CircleShape( r / world_scale );			var my_fixture:b2FixtureDef = new b2FixtureDef;						my_fixture.shape = my_circle;			my_fixture.density = 1;												var world_body:b2Body = world.CreateBody( my_body );						if(mc)			{				var object_data:Object = new Object();				object_data.texture = mc as Sprite;				object_data.body = world_body;				//world_body.SetUserData( object_data );				world_body.SetUserData( object_data );								mc.x = px;				mc.y = py;				mc.width = mc.height = r * 2;				addChild( mc );			}			world_body.CreateFixture( my_fixture );		}								public function draw_box( px, py, w, h, d, mc:MovieClip = null ):void		{			var my_body:b2BodyDef = new b2BodyDef;			my_body.position.Set( px / world_scale, py / world_scale );						if ( d )			{				my_body.type = b2Body.b2_dynamicBody;			}						var my_box:b2PolygonShape = new b2PolygonShape;			my_box.SetAsBox( w / 2 / world_scale, h / 2 / world_scale );						var my_fixture:b2FixtureDef = new b2FixtureDef;			my_fixture.shape = my_box;			my_fixture.density = 1;						var world_body:b2Body = world.CreateBody( my_body );						if(mc)			{				var object_data:Object = new Object();				object_data.texture = mc as Sprite;				object_data.body = world_body;				//world_body.SetUserData( object_data );				world_body.SetUserData( object_data );								mc.x = px;				mc.y = py;				mc.width = w;				mc.height = h;				addChild( mc );			}						world_body.CreateFixture( my_fixture );		}						public function on_time( ev:Event )		{			if( Math.random() < .5 )			{				draw_box( Math.random()*stage.stageWidth, 0, (Math.random()*50)+10, (Math.random()*50)+10, true, new Example2() );			}			else			{				draw_circle( Math.random()*stage.stageWidth, 0, (Math.random()*30)+10, true, new Example1() );			}		}								public function update( e:Event ):void		{			world.Step( 1 / 30, 10, 10 );						for( var bb:b2Body = world.GetBodyList(); bb; bb = bb.GetNext() )			{				if ( bb.GetUserData() && bb.GetUserData().texture )				{					var current_object:Object = bb.GetUserData();					//trace("current_object: "+current_object.texture);					current_object.texture.x = current_object.body.GetPosition().x * world_scale;					current_object.texture.y = current_object.body.GetPosition().y * world_scale;					current_object.texture.rotation = current_object.body.GetAngle() * 57;				}			}						world.ClearForces();			world.DrawDebugData();		}	}}