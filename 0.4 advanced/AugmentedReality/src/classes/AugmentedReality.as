package classes{	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.media.Camera;	import flash.media.Video;	import flash.utils.ByteArray;	import flash.events.NetStatusEvent;	import flash.net.NetConnection;	import flash.net.NetStreamInfo;	import flash.net.NetStream;	import flash.media.Video;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLLoaderDataFormat;	import org.libspark.flartoolkit.core.FLARCode;	import org.libspark.flartoolkit.core.param.FLARParam;	import org.libspark.flartoolkit.core.raster.rgb.FLARRgbRaster_BitmapData;	import org.libspark.flartoolkit.core.transmat.FLARTransMatResult;	import org.libspark.flartoolkit.detector.FLARSingleMarkerDetector;	import org.libspark.flartoolkit.pv3d.FLARBaseNode;	import org.libspark.flartoolkit.pv3d.FLARCamera3D;	import org.papervision3d.materials.VideoStreamMaterial;	import org.papervision3d.objects.primitives.Plane;	import org.papervision3d.core.proto.CameraObject3D;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.cameras.*;	import org.papervision3d.scenes.Scene3D;	import org.papervision3d.render.BasicRenderEngine;	public class AugmentedReality extends Sprite	{		//papervision 3D setup		public var renderer:BasicRenderEngine;		public var scene:Scene3D;		public var viewport:Viewport3D;		public var camera:FLARCamera3D;				//3D objects		private var video_plane:Plane;		private var video_stream:VideoStreamMaterial;		//video connections		private var video:Video;				private var net_connection:NetConnection;		private var net_stream:NetStream;		private var video_length:Number;				private var video_path:String = "demo_video.flv";		private var video_status:String = "pause";		//marker		private var camera_loader:URLLoader;		private var marker_loader:URLLoader;		//augmented setup		private var vid:Video;		private var cam:Camera;		private var bmd:BitmapData;		private var fparams:FLARParam;		private var mpattern:FLARCode;		private var raster:FLARRgbRaster_BitmapData;		private var detector:FLARSingleMarkerDetector;		private var container:FLARBaseNode;		private var trans:FLARTransMatResult;		private var frame_counter:int = 0;						public function AugmentedReality( )		{			loadCamera( );		}		private function loadCamera( ):void		{			camera_loader = new URLLoader( );			camera_loader.dataFormat = URLLoaderDataFormat.BINARY;			camera_loader.load( new URLRequest( "camera_para.dat" ) );			camera_loader.addEventListener( Event.COMPLETE, onLoadCamera );			camera_loader.addEventListener( Event.COMPLETE, loadMarker );		}		private function onLoadCamera( ev:Event ):void		{			camera_loader.removeEventListener( Event.COMPLETE, onLoadCamera );			fparams = new FLARParam( );			fparams.loadARParam( camera_loader.data );		}		private function loadMarker( ev:Event ):void		{			marker_loader = new URLLoader( );			marker_loader.dataFormat = URLLoaderDataFormat.TEXT;			marker_loader.load( new URLRequest( "pat1.pat" ) );			marker_loader.addEventListener( Event.COMPLETE, onLoadMarker );		}		private function onLoadMarker( ev:Event ):void		{			setup_FLAR( );			setup_camera( );			setup_bitmap( );			setup_papervision( );			addEventListener( Event.ENTER_FRAME, loop );		}		private function setup_FLAR( ):void		{			mpattern = new FLARCode( 16, 16 );			mpattern.loadARPatt( marker_loader.data );		}		private function setup_camera( ):void		{			vid = new Video( 640, 480 );			cam = Camera.getCamera( );			cam.setMode( 320, 240, 30 );			vid.attachCamera( cam );			addChild( vid );		}		private function setup_bitmap( ):void		{			bmd = new BitmapData( 640, 480 );			bmd.draw( vid );			raster = new FLARRgbRaster_BitmapData( bmd );			detector = new FLARSingleMarkerDetector( fparams, mpattern, 80 );		}		private function setup_papervision( ):void		{			scene = new Scene3D( );			camera = new FLARCamera3D( fparams );			container = new FLARBaseNode( );			scene.addChild( container );			setup_video( );			renderer = new BasicRenderEngine( );			trans = new FLARTransMatResult( );			viewport = new Viewport3D( );			addChild( viewport );		}		private function setup_video( ):void		{			video_material( );			/* public function Plane(  material:MaterialObject3D=null,  			        width:Number=0,  			        height:Number=0,  			        segmentsW:Number=0,  			        segmentsH:Number=0  ) */			video_plane = new Plane( video_stream, 120, 90, 1, 1 );			video_plane.rotationZ = -90;			video_plane.rotationY = 180;			//video_plane.scale =  2;			container.addChild( video_plane );		}		public function video_material( ):void		{			var custom_client:Object = new Object( );			custom_client.onMetaData = metaDataHandler;			net_connection = new NetConnection( );			net_connection.connect( null );			net_stream = new NetStream( net_connection );			net_stream.client = custom_client;			net_stream.addEventListener( NetStatusEvent.NET_STATUS, onStatusEvent );			net_stream.play( video_path );			video_status = "paused";			net_stream.pause( );			addEventListener( Event.ENTER_FRAME, monitor_netstream );			video = new Video( 640, 480 );			video.smoothing = true;			video.attachNetStream( net_stream );			video_stream = new VideoStreamMaterial( video, net_stream, false, true );			video_stream.doubleSided = false;		}		private function metaDataHandler( info_object:Object ):void		{			trace( ( "metaData:" + info_object.duration ) );			video_length = info_object.duration;		}				private function onStatusEvent( stat:Object ):void		{			trace( stat.info.code );			//if(  stat.info.code == "NetStream.Play.Stop"  )			//{			//	net_stream.seek( 0 );			//}		}		private function monitor_netstream( ev:Event ):void		{			var info_container:NetStreamInfo = net_stream.info;			var playback_perc = net_stream.time / video_length;			if ( ( playback_perc > .95 ) )			{				net_stream.seek( 0 );			}		}		private function pause_video( ):void		{			video_status = "paused";			net_stream.pause( );		}		private function play_video( ):void		{			video_status = "playing";			net_stream.resume( );		}		private function loop( e:Event ):void		{			bmd.draw( vid );			frame_counter++;			renderer.renderScene( scene, camera, viewport );			if ( ( frame_counter > 5 ) )			{				frame_counter = 0;				try				{					if ( detector.detectMarkerLite( raster, 80 ) && detector.getConfidence( ) > .5 )					{						if ( ( video_status == "paused" ) )						{							play_video( );							viewport.visible = true;						}						detector.getTransformMatrix( trans );						container.setTransformMatrix( trans );					}					else					{						if ( ( video_status == "playing" ) )						{							pause_video( );							viewport.visible = false;						}					}				}				catch ( e:Error )				{				}			}		}	}}