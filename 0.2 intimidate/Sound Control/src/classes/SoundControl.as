package classes{	import flash.display.MovieClip;    import flash.utils.getDefinitionByName;    import flash.net.URLRequest;	    import flash.media.Sound;	import flash.media.SoundChannel;			import flash.events.Event;	import flash.events.MouseEvent;    import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;		    import flash.media.SoundLoaderContext;    import flash.media.SoundTransform;			public class SoundControl extends MovieClip	{		private var import_channel:SoundChannel = new SoundChannel();		private var sound_channel:SoundChannel = new SoundChannel();		private var current_music:String = "";				public var SOUND_FINISHED:String = "sound_finished";				public function SoundControl() 		{			btnOne.buttonMode = btnTwo.buttonMode = true;			btnOne.mouseChildren = btnTwo.mouseChildren = false;			btnOne.addEventListener( MouseEvent.MOUSE_UP, btnOneClicked );			btnTwo.addEventListener( MouseEvent.MOUSE_UP, btnTwoClicked );		}						private function btnOneClicked( ev:MouseEvent ):void		{			importSound( "audio/Wood.mp3" )		}						private function btnTwoClicked( ev:MouseEvent ):void		{			play_sound( "BellSound" )		}						public function importSound( sound_path:String ):void		{			var req:URLRequest = new URLRequest( sound_path );			var context:SoundLoaderContext = new SoundLoaderContext();						var sound_load:Sound = new Sound();			sound_load.addEventListener( ProgressEvent.PROGRESS, preloadLoop );            sound_load.addEventListener( IOErrorEvent.IO_ERROR, loadError );			sound_load.addEventListener( Event.COMPLETE, loadComplete );			sound_load.load( req, context );					}									public function preloadLoop( ev:ProgressEvent ):void		{			var perc:Number = ev.bytesLoaded / ev.bytesTotal;		}				private function loadError( ev:IOErrorEvent ):void 		{			trace( "The following error occured: " + ev );   		}						private function loadComplete( ev:Event ):void		{						ev.currentTarget.removeEventListener( Event.COMPLETE, loadComplete );			ev.currentTarget.addEventListener( ProgressEvent.PROGRESS, preloadLoop );            ev.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, loadError );									var new_sound:Sound = Sound( ev.currentTarget );						import_channel = new_sound.play();					}														private function play_sound( sound_name:String, sound_loop:int = 0, sound_volume:Number = 1 ):void		{			var sound_object:Object = getDefinitionByName( sound_name );						var new_sound:Sound = new sound_object() as Sound;						var sound_transform:SoundTransform = new SoundTransform();			sound_transform.volume = sound_volume;						sound_channel = new_sound.play( 0, sound_loop, sound_transform );		}						public function cleanup():void		{			import_channel.stop();			sound_channel.stop();		}	}	}