package classes{	import flash.display.MovieClip;	import flash.media.Video;	import flash.net.NetStream;	import flash.net.NetConnection;	import flash.events.Event;	import flash.events.NetStatusEvent;	import flash.events.AsyncErrorEvent;		public class VideoControl extends MovieClip 	{		private var video:Video;		private var ns:NetStream;		private var _video_looping:Boolean = false;						public function VideoControl()		{			play_clip( "video/demo_video.mp4", false );		}						public function play_clip( clip_path:String, video_looping:Boolean ):void		{			_video_looping = video_looping;						setup_video();						ns.play( clip_path );		}						public function setup_video( stream:String = null ):void		{			video = new Video( 550,	400 );			video.x = 0; 			video.y = 0;			addChild( video );						var nc:NetConnection = new NetConnection();			nc.connect( stream );						ns = new NetStream( nc );			ns.addEventListener( NetStatusEvent.NET_STATUS, onStatusEvent );			ns.addEventListener( AsyncErrorEvent.ASYNC_ERROR, AsyncHandler );			ns.bufferTime = 0.5;						video.attachNetStream( ns );			video.smoothing = true;			video.deblocking = 3;						ns.client = new Object();			ns.client.onMetaData = onMetaData;			ns.client.onCuePoint = onCuePoint;		}							private function onMetaData( data:Object ):void		{			trace("meta recived " + data.duration);		}						private function onCuePoint( data:Object ):void		{			trace( "cue recived " + data.name );		}				/*		*catch errors, usually caused by cue points or meta data not being handled correctly		*/		private function AsyncHandler( ev:AsyncErrorEvent ):void		{					}						/*		*status events		*/		private function onStatusEvent( stat:Object ):void		{			//trace(stat.info.code);						if( stat.info.code == "NetStream.Play.Stop" )			{				if( _video_looping )				{					ns.seek(0);				}				else				{					ns.seek( ns.time );					ns.togglePause();				}			}		}																/*		*close the netstream and remove from the stage		*/		public function close():void		{			try			{				video.visible = false;				ns.close();			}			catch( error:Error )			{				trace("Error: "+error);			}		}	}}