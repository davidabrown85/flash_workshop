package classes.sound{	import flash.display.MovieClip;	import flash.media.SoundChannel;	import flash.media.Sound;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;		import flash.display.Loader;	import flash.net.URLRequest;		import flash.media.SoundLoaderContext;	import flash.media.SoundTransform;	import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;		import flash.media.SoundMixer;	public class SoundControl extends MovieClip	{		private var music_channel:SoundChannel = new SoundChannel();		private var sound_channel:SoundChannel = new SoundChannel();		private var talking_channel:SoundChannel = new SoundChannel();						public const MUSIC_COMPLETE:String = "music_complete";		public const SOUND_COMPLETE:String = "sound_complete";		public const TALKING_COMPLETE:String = "talking_complete";		public const IMPORT_LOADED:String = "import_loaded";				public const STILL_PLAYING:String = "still_playing";		public const NOT_PLAYING:String = "not_playing";				public var music_status:String = NOT_PLAYING;		public var sound_status:String = NOT_PLAYING;		public var talking_status:String = NOT_PLAYING;				private var current_music:String = "";		private var current_talking:String = "";				private var import_object:Object;				private var sound_counter = 0;				public function SoundControl()		{						trace(" new sound");		}		public function import_music( sound_path:String, music_loop:int = 0, music_volume:Number = 1, music_refresh:Boolean = false ):void		{			if( music_refresh || !import_object || ( import_object && import_object.name != sound_path ) )			{				if( import_object )				{					import_object.the_sound.removeEventListener( ProgressEvent.PROGRESS, preloadLoop );					import_object.the_sound.removeEventListener( IOErrorEvent.IO_ERROR, load_error );					import_object.the_sound.removeEventListener( Event.COMPLETE, load_complete );				}								var the_sound:Sound = new Sound();								import_object = new Object();				import_object.name = sound_path;				import_object.music_loop = music_loop;				import_object.music_volume = music_volume;				import_object.the_sound = the_sound;								var req:URLRequest = new URLRequest( sound_path );				var context:SoundLoaderContext = new SoundLoaderContext();					the_sound.addEventListener( ProgressEvent.PROGRESS, preloadLoop );				the_sound.addEventListener( IOErrorEvent.IO_ERROR, load_error );				the_sound.addEventListener( Event.COMPLETE, load_complete );				the_sound.load( req, context );			}		}		public function preloadLoop( ev:ProgressEvent ):void		{			//var perc:Number = ev.bytesLoaded / ev.bytesTotal;		}		private function load_error( ev:IOErrorEvent ):void		{			trace( "The following error occured: " + ev );   		}		private function load_complete( ev:Event ):void		{					ev.currentTarget.removeEventListener( ProgressEvent.PROGRESS, preloadLoop );			ev.currentTarget.removeEventListener( Event.COMPLETE, load_complete );			ev.currentTarget.removeEventListener( IOErrorEvent.IO_ERROR, load_error );						import_object.loaded_sound = Sound( ev.currentTarget );						dispatchEvent( new Event( IMPORT_LOADED ) );		}						public function start_loaded_sound():void		{			if ( music_channel )			{				music_channel.stop();			}						create_sound( import_object.loaded_sound, music_channel, import_object.music_loop, import_object.music_volume );		}				public function play_music_by_name( music_name:String, music_loop:int = 0, music_volume:Number = 1, music_refresh:Boolean = false ):void		{			if ( current_music != music_name || music_refresh )			{				current_music = music_name;				if ( music_channel )					music_channel.stop();				try				{					var sound_object:Object = getDefinitionByName( music_name );						var new_sound:Sound = new sound_object() as Sound;						create_sound( new_sound, music_channel, music_loop, music_volume );									}catch( error:ReferenceError ){ }//trace( error ); }			}		}		public function play_sound_by_name( sound_name:String, sound_loop:int = 0, sound_volume:Number = 1 ):void		{			try			{				var sound_object:Object = getDefinitionByName( sound_name );				var new_sound:Sound = new sound_object() as Sound;								if( new_sound )					create_sound( new_sound, sound_channel, sound_loop, sound_volume );							}catch( error:ReferenceError ){ }//trace( error ); }		}		public function play_talking_by_name( sound_name:String, sound_loop:int = 0, sound_volume:Number = 1 ):void		{			if( current_talking != sound_name || talking_status == NOT_PLAYING )			{				current_talking = sound_name								try				{									var sound_object:Object = getDefinitionByName( sound_name );					var new_sound:Sound = new sound_object() as Sound;							talking_channel.stop();										create_sound( new_sound, talking_channel, sound_loop, sound_volume );								}catch( error:ReferenceError ){ }//trace( error ); }			}		}								private function create_sound( the_sound:Sound, the_channel:SoundChannel, loop:int = 0, volume:Number = 1 ):void		{			var sound_transform:SoundTransform = new SoundTransform();			sound_transform.volume = volume;						switch( the_channel )			{				case music_channel: 									music_status = STILL_PLAYING;									music_channel = the_sound.play( 0, loop, sound_transform );									music_channel.addEventListener( Event.SOUND_COMPLETE, music_complete );									break;				case sound_channel: 									sound_status = STILL_PLAYING;									sound_channel = the_sound.play( 0, loop, sound_transform );									sound_channel.addEventListener( Event.SOUND_COMPLETE, sound_complete );									break;				case talking_channel: 									talking_status = STILL_PLAYING;									talking_channel = the_sound.play( 0, loop, sound_transform );									talking_channel.addEventListener( Event.SOUND_COMPLETE, talking_complete );									break;			}		}						public function stop_sound():void		{			sound_channel.stop();			sound_complete( null );		}						public function stop_talking():void		{			talking_channel.stop();			talking_channel.removeEventListener( Event.SOUND_COMPLETE, talking_complete );			talking_status = NOT_PLAYING;			dispatchEvent( new Event( TALKING_COMPLETE ) );		}						private function talking_complete( ev:Event ):void		{			talking_channel.removeEventListener( Event.SOUND_COMPLETE, talking_complete );			talking_status = NOT_PLAYING;			trace("talking_status = NOT_PLAYING");			dispatchEvent( new Event( TALKING_COMPLETE ) );		}		private function sound_complete( ev:Event ):void		{			sound_channel.removeEventListener( Event.SOUND_COMPLETE, sound_complete );			sound_status = NOT_PLAYING;			dispatchEvent( new Event( SOUND_COMPLETE ) );		}		private function music_complete( ev:Event ):void		{			music_channel.removeEventListener( Event.SOUND_COMPLETE, music_complete );			music_status = NOT_PLAYING;			dispatchEvent( new Event( MUSIC_COMPLETE ) );		}				public function pause_music( ):void		{			//music_channel.removeEventListener( Event.SOUND_COMPLETE, music_complete );			music_channel.soundTransform.volume = 0;		}				public function resume_music( ):void		{						music_channel.soundTransform.volume = 1;		}		public function cleanup():void		{			music_channel.stop();			sound_channel.stop();			talking_channel.stop();		}	}}