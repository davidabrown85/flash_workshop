package classes.physics{		import flash.display.Sprite; 	import flash.display.MovieClip;	import flash.display.Bitmap;	import flash.display.BitmapData; 		import flash.geom.Rectangle;	import flash.geom.Point;		import Box2D.Dynamics.*;	import Box2D.Collision.*;	import Box2D.Collision.Shapes.*;	import Box2D.Dynamics.Joints.*;	import Box2D.Common.Math.*;	 			public class Physics_Object extends MovieClip	{			public var object_type:String = "physics object";					public var update_type:Boolean = false;				public var dirty_object:Boolean = false;						protected static var physics_world:b2World;				protected static var physics_scale:int;								protected var bitmap_vector :Vector.<BitmapData>;				protected var bitmap_display :Bitmap;				protected var bitmap_frame:int = 0;				protected var bitmap_control:Sprite;				protected var LAYER_1:uint =  0x0001;		protected var LAYER_2:uint =  0x0002;		protected var LAYER_3:uint =  0x0004;		protected var LAYER_4:uint =  0x0010;		protected var LAYER_5:uint =  0x0020;		protected var LAYER_6:uint =  0x0040;		protected var LAYER_7:uint =  0x0100;		protected var LAYER_8:uint =  0x0200;		protected var LAYER_9:uint =  0x0400;		protected var LAYER_10:uint = 0x1000;				protected var layer_array:Array = [ LAYER_1, LAYER_2, LAYER_3, LAYER_4, LAYER_5, LAYER_6, LAYER_7, LAYER_8, LAYER_9, LAYER_10 ];						public function Physics_Object():void { }						public function setup_physics( _physics_world:b2World, _physics_scale:int ):void		{			physics_world = _physics_world;			physics_scale = _physics_scale;		}										protected function setup_box( boxMC:Sprite, offsetX:Number = 0, offsetY:Number = 0 ):b2PolygonShape		{						var temp_rotation:Number = boxMC.rotation / physics_scale; 						boxMC.rotation = 0;									var box_width:Number = boxMC.width / physics_scale / 2;			var box_height:Number = boxMC.height / physics_scale / 2;						var boxOffset:b2Vec2 = new b2Vec2( offsetX, offsetY);						var boxDef:b2PolygonShape = new b2PolygonShape();				boxDef.SetAsOrientedBox( box_width, box_height, boxOffset, temp_rotation );						boxMC.rotation = temp_rotation * physics_scale;						return boxDef;		}								protected function setup_custom( boxMC:MovieClip ):b2PolygonShape		{						var points_array:Array = [];						var children_amount:int = boxMC.numChildren;						for( var i:int = 0; i < children_amount; i++ )			{				if( boxMC.getChildByName("point_"+i) != null )				{					points_array.push( boxMC.getChildByName("point_"+i) );					boxMC.getChildByName("point_"+i).visible = false;				}			}									var custom_shape:b2PolygonShape = new b2PolygonShape();						var vertices:Array = [];						var points_amount:int = points_array.length;						for( var j:int = 0; j < points_amount; j++ )			{				            	var the_point:b2Vec2 = new b2Vec2( points_array[j].x / physics_scale, points_array[j].y / physics_scale);							vertices.push( the_point );			}            custom_shape.SetAsArray( vertices );						return custom_shape;		}						protected function setup_circle( circleMC:MovieClip ):b2CircleShape		{			var circle_width:Number = circleMC.width / physics_scale / 2;									var circleDef:b2CircleShape = new b2CircleShape( circle_width );						return circleDef;		}						protected function setup_manual_circle( circle_diam:Number ):b2CircleShape		{			var circle_width:Number = circle_diam / physics_scale / 2;									var circleDef:b2CircleShape = new b2CircleShape( circle_width );						return circleDef;		}						protected function setup_body( refMC:Sprite, fixed_rotation:Boolean = false ):b2BodyDef		{			var physics_body:b2BodyDef = new b2BodyDef();						physics_body.fixedRotation = fixed_rotation;						physics_body.position.Set( refMC.x / physics_scale, refMC.y / physics_scale);				physics_body.angle = refMC.rotation;									return physics_body;		}						protected function create_graphic( the_movieclip:Sprite, should_bitmap:Boolean = true  ):MovieClip		{						var new_movieclip:MovieClip = new MovieClip();						var children_amount:int = the_movieclip.numChildren;			//trace("children_amount: "+children_amount);			for( var i:int = 0; i < children_amount; i++ )			{			//trace("getChildAt( "+i+" ) ");				new_movieclip.addChild( the_movieclip.getChildAt( 0 ) );			}						for( var j:int = 0; j < the_movieclip.numChildren; j++ )			{				the_movieclip.removeChildAt( j );			}						if( should_bitmap )			{				//new_movieclip.cacheAsBitmapMatrix = new_movieclip.transform.concatenatedMatrix;				//new_movieclip.cacheAsBitmap = true;			}						new_movieclip.x = x;			new_movieclip.y = y;						//the_movieclip.x = the_movieclip.y = 0;						return new_movieclip;		}									protected function clear_movieclip( the_movieclip:Sprite ):void		{			the_movieclip.x = the_movieclip.y = 0;						for( var i:int = 0; i < the_movieclip.numChildren; i++ )			{				the_movieclip.removeChildAt( i );			}		}								public function create_bitmap_sheet( gridW, gridH, frameW, frameH, bitmapSheet:BitmapData ):void		{			bitmap_vector = new <BitmapData>[];						for( var y :int = 0; y < gridH; y++ )			{				for( var x :int = 0; x < gridW; x++ )				{					var bd :BitmapData = new BitmapData( frameW, frameH, true );								var srcRect :Rectangle = new Rectangle( ( x * frameW ), ( y * frameH ), frameW, frameH );								bd.copyPixels( bitmapSheet, srcRect, new Point( 0, 0 ) );								bitmap_vector.push( bd );				}			}						bitmapSheet.dispose();			bitmapSheet = null;									bitmap_display = new Bitmap();									bitmap_display.bitmapData = bitmap_vector[ 0 ];			bitmap_display.smoothing = true;						bitmap_display.x = -( frameW / 2 );			bitmap_display.y = -( frameH / 2 );						bitmap_control = new Sprite();			bitmap_control.addChild( bitmap_display );		}								public function create_bitmap( bitmapSheet:BitmapData ):void		{						bitmap_display = new Bitmap();									bitmap_display.bitmapData = bitmapSheet;			bitmap_display.smoothing = true;						bitmap_display.x = -( bitmapSheet.width / 2 );			bitmap_display.y = -( bitmapSheet.height / 2 );						bitmap_control = new Sprite();			bitmap_control.addChild( bitmap_display );		}				public function update_object():void {}			}}