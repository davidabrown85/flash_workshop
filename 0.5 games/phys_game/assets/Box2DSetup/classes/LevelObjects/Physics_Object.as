package classes.LevelObjects{		import flash.display.Sprite; 	import flash.display.MovieClip; 		import Box2D.Dynamics.*;	import Box2D.Collision.*;	import Box2D.Collision.Shapes.*;	import Box2D.Dynamics.Joints.*;	import Box2D.Common.Math.*;	 		public class Physics_Object extends MovieClip	{			public var object_type:String = "physics object";					public var object_depth:int = 0;				protected static var physics_world:b2World;				protected static var physics_scale:int;						public function Physics_Object():void		{  		}						public function setup_physics( _physics_world:b2World, _physics_scale:int ):void		{			physics_world = _physics_world;			physics_scale = _physics_scale;		}										protected function setup_box( boxMC:MovieClip, offsetX:Number = 0, offsetY:Number = 0 ):b2PolygonShape		{						var temp_rotation:Number = boxMC.rotation / physics_scale; 						boxMC.rotation = 0;									var box_width:Number = boxMC.width / physics_scale / 2;			var box_height:Number = boxMC.height / physics_scale / 2;						var boxOffset:b2Vec2 = new b2Vec2( offsetX, offsetY);						var boxDef:b2PolygonShape = new b2PolygonShape();				boxDef.SetAsOrientedBox( box_width, box_height, boxOffset, temp_rotation );						boxMC.rotation = temp_rotation * physics_scale;						return boxDef;		}						protected function setup_circle( circleMC:MovieClip ):b2CircleShape		{			var circle_width:Number = circleMC.width / physics_scale / 2;									var circleDef:b2CircleShape = new b2CircleShape( circle_width );						return circleDef;		}						protected function setup_body( refMC:MovieClip, fixed_rotation:Boolean = false ):b2BodyDef		{			var physics_body:b2BodyDef = new b2BodyDef();						physics_body.fixedRotation = fixed_rotation;						physics_body.position.Set( refMC.x / physics_scale, refMC.y / physics_scale);				physics_body.angle = refMC.rotation;									return physics_body;		}	}}